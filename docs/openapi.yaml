openapi: 3.1.0
info:
  title: Salud La Ceiba API
  version: "1.0.0"
servers:
  - url: http://localhost:4000/api/v1
tags:
  - name: Autenticación
    description: End-points de login y tokens (JWT)
  - name: Usuarios
    description: Administración de usuarios y roles
  - name: Sectorización
    description: End-points para gestionar territorios y sectores (sin geometría GIS)
  - name: Viviendas
    description: End-points para gestionar viviendas
  - name: Personas
    description: Gestión de personas
  - name: Eventos
    description: Gestión de eventos
  - name: Métricas
    description: Gestión de métricas mensuales
  - name: Metas
    description: Gestión de metas anuales por indicador y territorio
  - name: Dashboard
    description: KPIs y series temporales
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # ---------- Autenticación ----------
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:    { type: string, format: email }
        password: { type: string }
    TokenResponse:
      type: object
      properties:
        accessToken:  { type: string }
        refreshToken: { type: string }
    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string }
    LogoutRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string }

    # ---------- Usuarios & Roles ----------
    UserList:
      type: object
      properties:
        meta:
          type: object
          properties:
            page:  { type: integer }
            limit: { type: integer }
            total: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/User' }
    User:
      type: object
      properties:
        user_id:   { type: integer }
        nombre:    { type: string }
        email:     { type: string }
        rol:       { type: string }
        activo:    { type: integer }
        creado_en: { type: string, format: date-time }
        persona_id:{ type: integer, nullable: true }

    CreateUserRequest:
      type: object
      required: [nombre,email,rol,password]
      properties:
        nombre:     { type: string }
        email:      { type: string, format: email }
        rol:        { type: string }
        password:   { type: string, format: password }
        persona_id: { type: integer }

    UpdateUserRequest:
      type: object
      properties:
        nombre:   { type: string }
        email:    { type: string, format: email }
        rol:      { type: string }
        password: { type: string, format: password }
        activo:   { type: boolean }
      minProperties: 1

    Role:
      type: object
      properties:
        role_id: { type: integer }
        name:    { type: string }

    # ---------- Territorios & Sectores ----------
    Territorio:
      type: object
      properties:
        territorio_id: { type: integer }
        codigo:        { type: string }
        nombre:        { type: string }

    SectorGeoJSON:
      type: object
      description: GeoJSON FeatureCollection

    CreateSector:
      type: object
      required: [territorio_id,nombre,geom]
      properties:
        territorio_id: { type: integer }
        nombre:        { type: string }
        geom:          { type: object }

    Error:
      type: object
      properties:
        error:   { type: string }
        message: { type: string }
    # -------------------------------------------------
    # 🏠 NUEVOS ESQUEMAS PARA VIVIENDAS
    # -------------------------------------------------
    CreateVivienda:
      type: object
      required: [sector_id,codigo_familia]
      properties:
        sector_id:      { type: integer, example: 8 }
        codigo_familia: { type: string,  example: "A-13" }
        direccion:      { type: string,  example: "Caserío Xe Kanac', lote 12" }
        lat:            { type: number,  format: float, example: 14.801234 }
        lng:            { type: number,  format: float, example: -91.298765 }

    UpdateVivienda:
      allOf:
        - $ref: '#/components/schemas/CreateVivienda'
        - required: []

    Vivienda:
      type: object
      properties:
        vivienda_id:    { type: integer }
        sector_id:      { type: integer }
        sector_nombre:  { type: string }
        codigo_familia: { type: string }
        direccion:      { type: string }
        lat:            { type: number, format: float, nullable: true }
        lng:            { type: number, format: float, nullable: true }
        created_at:     { type: string, format: date-time }
        personas_count: { type: integer }

    ViviendaCreated:
      type: object
      properties:
        vivienda_id: { type: integer }

    ViviendaList:
      type: object
      properties:
        meta:
          type: object
          properties:
            page:  { type: integer }
            limit: { type: integer }
            total: { type: integer }
        sector:
          type: object
          properties:
            sector_id: { type: integer }
        data:
          type: array
          items:
            type: object
            properties:
              vivienda_id:    { type: integer }
              codigo_familia: { type: string }
              personas:       { type: integer }
              lat:            { type: number, nullable: true }
              lng:            { type: number, nullable: true }

    PersonaBasic:
      type: object
      properties:
        persona_id: { type: integer }
        nombres:    { type: string }
        apellidos:  { type: string }
        sexo:       { type: string, enum: [M,F] }
        fecha_nac:  { type: string, format: date }

    PersonaList:
      type: object
      properties:
        meta:
          type: object
          properties:
            page:  { type: integer }
            limit: { type: integer }
            total: { type: integer }
        vivienda:
          type: object
          properties:
            vivienda_id:    { type: integer }
            codigo_familia: { type: string }
        data:
          type: array
          items: { $ref: '#/components/schemas/PersonaBasic' }

    PersonaCreate:
      type: object
      required: [nombres, apellidos, sexo, fecha_nac]
      properties:
        nombres:    { type: string, example: "Ana" }
        apellidos:  { type: string, example: "López" }
        sexo:       { type: string, enum: [M, F], example: "F" }
        fecha_nac:  { type: string, format: date, example: "1990-05-10" }
        dpi:        { type: string, nullable: true }
        idioma:     { type: string, nullable: true }

    PersonaHist:
      type: object
      properties:
        evento_id:   { type: integer }
        ind_id:      { type: integer }
        fecha_evento:{ type: string, format: date-time }
        valor_num:   { type: number, nullable: true }
        valor_texto: { type: string, nullable: true }

    PersonaDetail:
      allOf:
        - $ref: '#/components/schemas/PersonaBasic'
        - type: object
          properties:
            historial:
              type: array
              items: { $ref: '#/components/schemas/PersonaHist' }

    PersonaCreateResp:
      type: object
      properties:
        persona_id: { type: integer }
    # ---------- Eventos ----------
    CreateEventoRequest:
      type: object
      required: [persona_id, ind_id]
      properties:
        persona_id:   { type: integer }
        ind_id:       { type: integer }
        valor_num:    { type: number, nullable: true }
        valor_texto:  { type: string, nullable: true }
        fecha_evento: { type: string, format: date-time }
    Evento:
      type: object
      properties:
        evento_id:    { type: integer }
        fecha_evento: { type: string, format: date-time }
        valor_num:    { type: number, nullable: true }
        valor_texto:  { type: string, nullable: true }
        persona_id:   { type: integer }
        nombres:      { type: string }
        apellidos:    { type: string }
        ind_id:       { type: integer }
        indicador:    { type: string }
        created_by:   { type: integer }
    EventoList:
      type: object
      properties:
        meta:
          type: object
          properties:
            page:  { type: integer }
            limit: { type: integer }
            total: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/Evento' }
    MetricaInput:
      type: object
      required: [ind_id, territorio_id, anio, mes, valor_num]
      properties:
        ind_id:
          oneOf:
            - type: integer
            - type: string
        territorio_id:
          type: integer
          minimum: 1
          maximum: 5
        anio:
          type: integer
          minimum: 2000
          maximum: 2099
        mes:
          type: integer
          minimum: 1
          maximum: 12
        valor_num:
          type: integer
          minimum: 0
        valor_den:
          type: integer
          minimum: 0
          nullable: true
    MorbilidadRow:
      type: object
      properties:
        causa_id:   { type: integer }
        grupo_edad: { type: string, enum: ['0-<1','1-4','5-14','15+'] }
        casos:      { type: integer }
    MorbilidadRequest:
      type: object
      required: [anio, mes, territorio_id, datos]
      properties:
        anio:          { type: integer }
        mes:           { type: integer }
        territorio_id: { type: integer }
        datos:
          type: array
          items: { $ref: '#/components/schemas/MorbilidadRow' }
    DefuncionRequest:
      type: object
      required: [causa_id, territorio_id, fecha_defuncion, lugar_defuncion, certificador_id]
      properties:
        persona_id:      { type: integer, nullable: true }
        causa_id:        { type: integer }
        territorio_id:   { type: integer }
        fecha_defuncion: { type: string, format: date-time }
        lugar_defuncion: { type: string, enum: ['hospital','domicilio','otro'] }
        certificador_id: { type: integer }
        detalle_json:    { type: object }
    # ---------- Metas ----------
    Meta:
      type: object
      properties:
        meta_id:           { type: integer }
        ind_id:            { type: integer }
        ind_nombre:        { type: string }
        territorio_id:     { type: integer }
        territorio_nombre: { type: string }
        anio:              { type: integer }
        valor_objetivo:    { type: integer }
    MetaUpsert:
      type: object
      required: [ind_id, territorio_id, anio, valor_objetivo]
      properties:
        ind_id:          { type: integer }
        territorio_id:   { type: integer }
        anio:            { type: integer }
        valor_objetivo:  { type: integer }

security:
  - bearerAuth: []

paths:
  /dashboard/coberturas:
    get:
      tags: [Dashboard]
      summary: KPIs por mes / territorio / sector
      parameters:
        - in: query
          name: periodo
          schema: { type: string, example: "202507-202506" }
        - in: query
          name: territorio_id
          schema: { type: integer, example: 1 }
        - in: query
          name: sector_id
          schema: { type: integer, example: 3 }
        - in: query
          name: ind_id
          schema: { type: integer, example: 4 }
      responses:
        "200": { description: OK }

  /dashboard/alertas:
    get:
      tags: [Dashboard]
      summary: Indicadores bajo la meta (<100 %)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: periodo
          schema: { type: string, example: "202507" }
        - in: query
          name: territorio_id
          schema: { type: integer, example: 2 }
      responses:
        "200": { description: OK }

  /dashboard/series:
    get:
      tags: [Dashboard]
      summary: Serie histórica mensual de un indicador
      parameters:
        - in: query
          name: ind_id
          required: true
          schema: { type: integer, example: 3 }
        - in: query
          name: territorio_id
          schema: { type: integer, example: 1 }
        - in: query
          name: sector_id
          schema: { type: integer, example: 2 }
        - in: query
          name: desde
          schema: { type: string, example: "202401" }
        - in: query
          name: hasta
          schema: { type: string, example: "202507" }
      responses:
        "200": { description: OK }
  # ========================================
  # 🔐 AUTENTICACIÓN
  # ========================================
  /auth/login:
    post:
      tags: [Autenticación]
      summary: Inicio de sesión
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
        "401": { description: Credenciales inválidas, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/refresh:
    post:
      tags: [Autenticación]
      summary: Renueva access-token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshRequest' }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { accessToken: { type: string } } } } } }
        "401": { description: Refresh inválido, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/logout:
    post:
      tags: [Autenticación]
      summary: Cierra sesión
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogoutRequest' }
      responses:
        "200": { description: Sesión terminada, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }

  # ========================================
  # 👥 USUARIOS Y ROLES
  # ========================================
  /users:
    get:
      tags: [Usuarios]
      summary: Lista paginada de usuarios
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: rol
          schema: { type: string }
        - in: query
          name: activo
          schema: { type: boolean }
        - in: query
          name: q
          schema: { type: string }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/UserList' } } } }
    post:
      tags: [Usuarios]
      summary: Crea un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateUserRequest' }
      responses:
        "201": { description: Creado, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }

  /users/{id}:
    get:
      tags: [Usuarios]
      summary: Obtiene un usuario
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        "404": { description: No encontrado, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

    put:
      tags: [Usuarios]
      summary: Actualiza un usuario
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserRequest' }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }

    delete:
      tags: [Usuarios]
      summary: Desactiva un usuario
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "204": { description: Sin contenido }

  /roles:
    get:
      tags: [Usuarios]
      summary: Devuelve catálogo de roles
      responses:
        "200":
          description: OK

# =========================
# 🚑 MÓDULO CLÍNICOS
# =========================

  /vacunacion/eventos:
    post:
      tags: [Eventos]
      summary: Crea un evento de vacunación
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventoRequest'
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  evento_id: { type: integer }

  /vacunacion/coberturas:
    get:
      tags: [Métricas]
      summary: Lista coberturas de vacunación
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: territorio_id
          required: true
          schema: { type: integer }
        - in: query
          name: anio
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ind_id:        { type: integer }
                    mes:           { type: integer }
                    cobertura_pct: { type: number }

  /nutricion/eventos:
    post:
      tags: [Eventos]
      summary: Crea un evento de nutrición
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventoRequest'
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  evento_id: { type: integer }

  /nutricion/coberturas:
    get:
      tags: [Métricas]
      summary: Lista coberturas de nutrición
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: territorio_id
          required: true
          schema: { type: integer }
        - in: query
          name: anio
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ind_id:        { type: integer }
                    mes:           { type: integer }
                    cobertura_pct: { type: number }

  /reproductiva/eventos:
    post:
      tags: [Eventos]
      summary: Crea un evento de salud reproductiva
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventoRequest'
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  evento_id: { type: integer }

  /reproductiva/coberturas:
    get:
      tags: [Métricas]
      summary: Lista coberturas de salud reproductiva
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: territorio_id
          required: true
          schema: { type: integer }
        - in: query
          name: anio
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ind_id:        { type: integer }
                    mes:           { type: integer }
                    cobertura_pct: { type: number }

  /epidemiologia/eventos:
    post:
      tags: [Eventos]
      summary: Crea un evento de epidemiología
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventoRequest'
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  evento_id: { type: integer }

  /epidemiologia/coberturas:
    get:
      tags: [Métricas]
      summary: Lista coberturas de epidemiología
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: territorio_id
          required: true
          schema: { type: integer }
        - in: query
          name: anio
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ind_id:        { type: integer }
                    mes:           { type: integer }
                    cobertura_pct: { type: number }

  /morbilidad/casos:
    post:
      tags: [Métricas]
      summary: Inserta o actualiza lote de morbilidad
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MorbilidadRequest'
      responses:
        "204": { description: Sin contenido }

    get:
      tags: [Métricas]
      summary: Lista morbilidad filtrada
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: causa_id
          schema: { type: integer }
        - in: query
          name: territorio_id
          schema: { type: integer }
        - in: query
          name: anio
          schema: { type: integer }
        - in: query
          name: mes
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { type: object }

  /mortalidad/registros:
    post:
      tags: [Métricas]
      summary: Inserta nueva defunción
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefuncionRequest'
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  defuncion_id: { type: integer }

  /ambiente/metricas:
    post:
      tags: [Métricas]
      summary: Inserta o actualiza métricas de ambiente
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: '#/components/schemas/MetricaInput' }
      responses:
        "204":
          description: Sin contenido

  # ========================================
  # ✅ Metas
  # ========================================
  /metas:
    get:
      tags: [Metas]
      summary: Consultar metas anuales por indicador y territorio
      parameters:
        - in: query
          name: territorio_id
          schema: { type: integer, example: 1 }
        - in: query
          name: anio
          schema: { type: integer, example: 2025 }
        - in: query
          name: ind_id
          schema: { type: integer, example: 3 }
      responses:
        '200':
          description: Lista de metas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meta'
    put:
      tags: [Metas]
      security:
        - bearerAuth: []
      summary: Crear o actualizar metas (upsert)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/MetaUpsert'
                - type: array
                  items: { $ref: '#/components/schemas/MetaUpsert' }
      responses:
        '200': { description: Metas actualizadas o sin cambios }
        '201': { description: Todas las metas fueron creadas }
        '400': { description: Validación o FK inválida }
        '403': { description: Requiere rol ADMIN }

  # ========================================
  # 🗺️ SECTORIZACIÓN
  # ========================================
  /territorios:
    get:
      tags: [Sectorización]
      summary: Lista fija de territorios
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    territorio_id: { type: integer, example: 1 }
                    codigo:        { type: string,  example: "T1" }
                    nombre:        { type: string,  example: "Territorio 1" }

  /territorios/{id}/sectores:
    get:
      tags: [Sectorización]
      summary: Sectores por territorio
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: includeStats
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  territorio:
                    type: object
                    properties:
                      territorio_id: { type: integer }
                      codigo:        { type: string }
                      nombre:        { type: string }
                  sectores:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/SectorBasic'
                        - $ref: '#/components/schemas/SectorStats'
        "404": { description: No encontrado }

  /sectores:
    get:
      tags: [Sectorización]
      summary: Lista paginada de sectores
      parameters:
        - in: query
          name: territorio_id
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SectorList' }
    post:
      tags: [Sectorización]
      summary: Crea sector
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateSector' }
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  sector_id: { type: integer, example: 12 }
        "409": { description: Nombre duplicado }

  /sectores/{id}:
    get:
      tags: [Sectorización]
      summary: Ficha de sector
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SectorStats' }
        "404": { description: No encontrado }
    put:
      tags: [Sectorización]
      summary: Edita sector
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateSector' }
      responses:
        "200": { description: Actualizado }
        "409": { description: Conflicto de nombre }
    delete:
      tags: [Sectorización]
      summary: Desactiva sector (soft-delete)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "204": { description: Sin contenido }
        "400": { description: Viviendas activas }

  /sectores/{id}/viviendas:
    get:
      tags: [Sectorización]
      summary: Viviendas por sector
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: withGPS
          schema: { type: boolean, default: false }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ViviendaList' }
        "404":
          description: Sector no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /viviendas:
    post:
      tags: [Viviendas]
      summary: Crea una vivienda
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateVivienda' }
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ViviendaCreated' }
        "400":
          description: Datos inválidos
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
        "409":
          description: Código de familia duplicado
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /viviendas/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: integer }
    get:
      tags: [Viviendas]
      summary: Devuelve la ficha de la vivienda
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Vivienda' }
        "404":
          description: No encontrado
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
    put:
      tags: [Viviendas]
      summary: Edita datos de la vivienda
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateVivienda' }
      responses:
        "200":
          description: Actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        "400": { description: Datos inválidos,   content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        "403": { description: Rol insuficiente,  content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        "404": { description: No encontrado,     content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        "409": { description: Código duplicado,  content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /viviendas/{id}/personas:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: integer }
      - name: page
        in: query
        required: false
        schema: { type: integer, default: 1 }
      - name: limit
        in: query
        required: false
        schema: { type: integer, default: 20 }
    get:
      tags: [Viviendas]
      summary: Lista las personas que viven en la vivienda
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PersonaList' }
        "404":
          description: Vivienda no encontrada
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
    post:
      tags: [Viviendas]
      summary: Crea persona asociada a la vivienda
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PersonaCreate' }
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PersonaCreateResp' }
        "404": { description: Vivienda no encontrada }
        "409": { description: DPI duplicado }

  /personas:
    get:
      tags: [Personas]
      summary: Búsqueda global de personas
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: dpi
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonaList'

  /personas/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Personas]
      summary: Ficha de persona
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PersonaDetail' }
        "404": { description: No encontrado }
    put:
      tags: [Personas]
      summary: Actualiza datos demográficos
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PersonaCreate' }
      responses:
        "200": { description: Actualizado }
        "404": { description: No encontrado }
        "409": { description: DPI duplicado }
  /eventos:
    post:
      tags: [Eventos]
      summary: Crea un nuevo evento
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateEventoRequest' }
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  evento_id: { type: integer }
        "400": { description: Datos inválidos, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        "404": { description: Persona no existe, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

    get:
      tags: [Eventos]
      summary: Lista paginada de eventos
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: persona_id
          schema: { type: integer }
        - in: query
          name: ind_id
          schema: { type: integer }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EventoList' }

  /eventos/{id}:
    get:
      tags: [Eventos]
      summary: Obtiene detalle de un evento
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Evento' }
        "404": { description: No encontrado, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /metricas:
    get:
      tags: [Métricas]
      summary: Lista paginada/filtrada de métricas mensuales
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: territorio_id
          schema: { type: integer }
        - in: query
          name: ind_id
          schema: { type: string }
        - in: query
          name: periodo_desde
          schema: { type: string, pattern: "^\\d{4}-\\d{2}$" }
        - in: query
          name: periodo_hasta
          schema: { type: string, pattern: "^\\d{4}-\\d{2}$" }
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      page: { type: integer }
                      limit: { type: integer }
                      total: { type: integer }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ind_id:        { type: integer }
                        territorio_id: { type: integer }
                        anio:          { type: integer }
                        mes:           { type: integer }
                        valor_num:     { type: integer }
                        valor_den:     { type: integer, nullable: true }
                        updated_at:    { type: string, format: date-time }
    put:
      tags: [Métricas]
      summary: Carga o actualización masiva de métricas
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MetricaInput'
      responses:
        "200":
          description: OK
