openapi: 3.1.0
info:
  title: Salud La Ceiba API
  version: "1.0.0"
servers:
  - url: http://localhost:4000/api/v1
tags:
  - name: Sectorizaci√≥n
    description: End-points para gestionar territorios, sectores y viviendas (sin geometr√≠a GIS)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # ---------- Autenticaci√≥n ----------
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:    { type: string, format: email }
        password: { type: string }
    TokenResponse:
      type: object
      properties:
        accessToken:  { type: string }
        refreshToken: { type: string }
    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string }
    LogoutRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string }

    # ---------- Usuarios & Roles ----------
    UserList:
      type: object
      properties:
        meta:
          type: object
          properties:
            page:  { type: integer }
            limit: { type: integer }
            total: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/User' }
    User:
      type: object
      properties:
        user_id:   { type: integer }
        nombre:    { type: string }
        email:     { type: string }
        rol:       { type: string }
        activo:    { type: integer }
        creado_en: { type: string, format: date-time }
        persona_id:{ type: integer, nullable: true }

    CreateUserRequest:
      type: object
      required: [nombre,email,rol,password]
      properties:
        nombre:     { type: string }
        email:      { type: string, format: email }
        rol:        { type: string }
        password:   { type: string, format: password }
        persona_id: { type: integer }

    UpdateUserRequest:
      type: object
      properties:
        nombre:   { type: string }
        email:    { type: string, format: email }
        rol:      { type: string }
        password: { type: string, format: password }
        activo:   { type: boolean }
      minProperties: 1

    Role:
      type: object
      properties:
        role_id: { type: integer }
        name:    { type: string }

    # ---------- Territorios & Sectores ----------
    Territorio:
      type: object
      properties:
        territorio_id: { type: integer }
        codigo:        { type: string }
        nombre:        { type: string }

    SectorGeoJSON:
      type: object
      description: GeoJSON FeatureCollection

    CreateSector:
      type: object
      required: [territorio_id,nombre,geom]
      properties:
        territorio_id: { type: integer }
        nombre:        { type: string }
        geom:          { type: object }

    Error:
      type: object
      properties:
        error:   { type: string }
        message: { type: string }
security:
  - bearerAuth: []

paths:
  # ========================================
  # üîê AUTENTICACI√ìN
  # ========================================
  /auth/login:
    post:
      tags: [Autenticaci√≥n]
      summary: Inicio de sesi√≥n
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
        "401": { description: Credenciales inv√°lidas, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/refresh:
    post:
      tags: [Autenticaci√≥n]
      summary: Renueva access-token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshRequest' }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { accessToken: { type: string } } } } } }
        "401": { description: Refresh inv√°lido, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/logout:
    post:
      tags: [Autenticaci√≥n]
      summary: Cierra sesi√≥n
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogoutRequest' }
      responses:
        "200": { description: Sesi√≥n terminada, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }

  # ========================================
  # üë• USUARIOS Y ROLES
  # ========================================
  /users:
    get:
      tags: [Usuarios]
      summary: Lista paginada de usuarios
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: rol
          schema: { type: string }
        - in: query
          name: activo
          schema: { type: boolean }
        - in: query
          name: q
          schema: { type: string }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/UserList' } } } }
    post:
      tags: [Usuarios]
      summary: Crea un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateUserRequest' }
      responses:
        "201": { description: Creado, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }

  /users/{id}:
    get:
      tags: [Usuarios]
      summary: Obtiene un usuario
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        "404": { description: No encontrado, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

    put:
      tags: [Usuarios]
      summary: Actualiza un usuario
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserRequest' }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }

    delete:
      tags: [Usuarios]
      summary: Desactiva un usuario
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "204": { description: Sin contenido }

  /roles:
    get:
      tags: [Usuarios]
      summary: Devuelve cat√°logo de roles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Role' }

  # ========================================
  # üó∫Ô∏è SECTORIZACI√ìN
  # ========================================
  /territorios:
    get:
      tags: [Sectorizaci√≥n]
      summary: Lista fija de territorios
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    territorio_id: { type: integer, example: 1 }
                    codigo:        { type: string,  example: "T1" }
                    nombre:        { type: string,  example: "Territorio 1" }

  /territorios/{id}/sectores:
    get:
      tags: [Sectorizaci√≥n]
      summary: Sectores por territorio
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: includeStats
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  territorio:
                    type: object
                    properties:
                      territorio_id: { type: integer }
                      codigo:        { type: string }
                      nombre:        { type: string }
                  sectores:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/SectorBasic'
                        - $ref: '#/components/schemas/SectorStats'
        "404": { description: No encontrado }

  /sectores:
    get:
      tags: [Sectorizaci√≥n]
      summary: Lista paginada de sectores
      parameters:
        - in: query
          name: territorio_id
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SectorList' }
    post:
      tags: [Sectorizaci√≥n]
      summary: Crea sector
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateSector' }
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  sector_id: { type: integer, example: 12 }
        "409": { description: Nombre duplicado }

  /sectores/{id}:
    get:
      tags: [Sectorizaci√≥n]
      summary: Ficha de sector
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SectorStats' }
        "404": { description: No encontrado }
    put:
      tags: [Sectorizaci√≥n]
      summary: Edita sector
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateSector' }
      responses:
        "200": { description: Actualizado }
        "409": { description: Conflicto de nombre }
    delete:
      tags: [Sectorizaci√≥n]
      summary: Desactiva sector (soft-delete)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "204": { description: Sin contenido }
        "400": { description: Viviendas activas }

  /sectores/{id}/viviendas:
    get:
      tags: [Sectorizaci√≥n]
      summary: Viviendas por sector
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: withGPS
          schema: { type: boolean, default: false }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ViviendaList' }
        "404":
          description: Sector no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
